//{VARIABLES}//
  #include "Arduino.h"
  #include <U8g2lib.h>
  #include <Wire.h>
  #include "AVCheckerCalibrator.h"
  #include "MotorMoverPattern.h"
  #include "SDReader.h"
  #include "PressureSensor.h"

  U8G2_SSD1306_128X64_NONAME_F_HW_I2C u8g2(U8G2_R0, U8X8_PIN_NONE);

  int backwardSpinPin = 25;
  int forwardSpinPin = 26;
  int backwardSpinPin2 = 12;
  int forwardSpinPin2 = 14;

  #define ENCA 27 
  #define ENCB 13
  #define ENCA2 17 
  #define ENCB2 16

  int emgAPin = 32;
  int emgBPin = 33;
  // int emgCPin = ;

  int batteryAnalogReaderPin = 34;
  int pressureSensorReadPin = 35;
  int checkBatteryPin = 1;
  int piezoFeedbackPWMPin = 15;


  int forwardButtonPin = 2;     
  int backwardButtonPin = 4;    
  int calibrationButtonPin = 3;  

  ///SD CARD
  //23 MOSI
  //19 MISO
  //18 SCK
  //5 SS/CS

  ///OLED
  //22 SCL
  //21 SDA

  bool setupDisplayFirstTime = true;
  bool waitingCalibrationTimer = false;
  bool inCalibrationMode = false;
  bool firstTimeInitialize = true;
  bool piezoToggler = false;
  bool manualMode = false;
  bool listeningForGrip = false;
  bool listeningForUnGrip = false;
  bool staticFound = false;
  int manualBreakerCounter = 1;
  bool checkOthers = true;
  bool refreshing = false;
  bool motorWorking = false;

  bool morse0 = false;
  bool morse1 = false;

  bool morseFirstStep = false;
  bool morseTimerActivity = false;

  boolean grippingIsTrue = false;
  boolean unGrippingIsTrue = false;

  int speedPiezo = 0;
  int speedMotor = 125;
  volatile int stepAmount = 0;
  volatile float stepClosedPosition = 0;
  volatile float stepOpenedPosition = -4350;
  float DTWStatic = 0.0;

  unsigned long timerCalibrationMode = millis();
  unsigned long timerCheckDTW = millis();
  unsigned long cooldownTimer = 0.0;
  unsigned long batteryCheckCooldown = 0.0;
  unsigned long listenUnGripTimer = 0.0;
  unsigned long listenGripTimer = 0.0;
  unsigned long staticListener = 0.0;
  unsigned long timerPoint = 0.0;
  unsigned long stopMotorTimer = 0.0;
  unsigned long motorMoverTimer = 0.0;
  unsigned long cooldownForSimilarity = millis();
  unsigned long programStart = millis();
  unsigned long refresher = millis();

  
  
  unsigned long morseCooldownTimer = 0.0;

  //Samples taken every 2000/(10*10)=20 milliseconds
  unsigned int liveArrayUpdaterMillisValue = 2000;
  int liveArrayUpdaterDelayValue = 10;

  float DTWForGrip = 2.0;
  float DTWForUnGrip = 0.7;
  float DTWLive = 0.3;
  float lowerEndGripDTW = 0.0;
  float lowerEndUnGripDTW = 0.0;
  float gripMaxLimit = 0.5;
  float unGripMaxLimit = 0.2;

  float DTWForGripTestsArray[5] =  {4.4, 4.4, 4.4, 4.4, 4.4};
  float DTWForUnGripTestsArray[5] =  {0.9, 0.9, 0.9, 0.9, 0.9};

  float sensitivity = 3.0;
  float emgVolt = 0.0;
  float batteryHalfAnalogValue = 0.0;
  float batteryVoltage = 0.0;
  char charArray[7];
  

  float recordedDataArrayGrip[10] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
  float recordedDataArrayUnGrip[10] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
  float avrgArray[10] = {5.0, 5.0, 5.0, 5.0, 5.0, 5.0, 5.0, 5.0, 5.0, 5.0};
  float resetArray[10] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
  float gripSignalSimilarity = 0.0;
  float ungripSignalSimilarity = 0.0;
  float gripMultiplier = 0.0;
  float ungripMultiplier = 0.0;

  DefualtLimits defaults;
  EMGMovementChecker emgCheckerObject(forwardSpinPin, backwardSpinPin);
  MotorMovementFromPattern motorMoverObject(forwardSpinPin, backwardSpinPin);
  PressureSensor PressureSensorObject(pressureSensorReadPin);
  SDCard SDCardObject;
  File dataFile;

//{VARIABLES}//

///////////////////////BMP START
  const unsigned char epd_bitmap_BatteryStateLvL4 [] PROGMEM = {
    0xf0, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x3f, 0x00, 0xf0, 0xff, 
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x3f, 0x00, 0xfc, 0xff, 0xff, 0xff, 
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0xfc, 0xff, 0xff, 0xff, 0xff, 0xff, 
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x7f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0xc0, 0x03, 0x3f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0xc0, 0x03, 0x1f, 0xfc, 0xff, 0xcf, 0xff, 0xff, 0xcf, 0xff, 0xff, 0xcf, 0xff, 0xff, 
    0xc0, 0x03, 0x0f, 0xfc, 0xff, 0xcf, 0xff, 0xff, 0xcf, 0xff, 0xff, 0xcf, 0xff, 0xff, 0xc1, 0x03, 
    0x0f, 0xff, 0xff, 0xcf, 0xff, 0xff, 0xcf, 0xff, 0xff, 0xcf, 0xff, 0xff, 0xc3, 0x03, 0x0f, 0xff, 
    0xff, 0xcf, 0xff, 0xff, 0xcf, 0xff, 0xff, 0xcf, 0xff, 0xff, 0xc7, 0x03, 0xcf, 0xff, 0xff, 0xcf, 
    0xff, 0xff, 0xcf, 0xff, 0xff, 0xcf, 0xff, 0xff, 0xcf, 0x03, 0xcf, 0xff, 0xff, 0xcf, 0xff, 0xff, 
    0xcf, 0xff, 0xff, 0xcf, 0xff, 0xff, 0xcf, 0x07, 0xcf, 0xff, 0xff, 0xcf, 0xff, 0xff, 0xcf, 0xff, 
    0xff, 0xcf, 0xff, 0xff, 0xcf, 0x0f, 0xcf, 0xff, 0xff, 0xcf, 0xff, 0xff, 0xcf, 0xff, 0xff, 0xcf, 
    0xff, 0xff, 0xcf, 0x1f, 0xcf, 0xff, 0xff, 0xcf, 0xff, 0xff, 0xcf, 0xff, 0xff, 0xcf, 0xff, 0xff, 
    0xcf, 0x3f, 0xcf, 0xff, 0xff, 0xcf, 0xff, 0xff, 0xcf, 0xff, 0xff, 0xcf, 0xff, 0xff, 0xcf, 0x7f, 
    0xcf, 0xff, 0xff, 0xcf, 0xff, 0xff, 0xcf, 0xff, 0xff, 0xcf, 0xff, 0xff, 0xcf, 0x7f, 0xcf, 0xff, 
    0xff, 0xcf, 0xff, 0xff, 0xcf, 0xff, 0xff, 0xcf, 0xff, 0xff, 0xcf, 0x7f, 0xcf, 0xff, 0xff, 0xcf, 
    0xff, 0xff, 0xcf, 0xff, 0xff, 0xcf, 0xff, 0xff, 0xcf, 0x7f, 0xcf, 0xff, 0xff, 0xcf, 0xff, 0xff, 
    0xcf, 0xff, 0xff, 0xcf, 0xff, 0xff, 0xcf, 0x7f, 0xcf, 0xff, 0xff, 0xcf, 0xff, 0xff, 0xcf, 0xff, 
    0xff, 0xcf, 0xff, 0xff, 0xcf, 0x7f, 0xcf, 0xff, 0xff, 0xcf, 0xff, 0xff, 0xcf, 0xff, 0xff, 0xcf, 
    0xff, 0xff, 0xcf, 0x7f, 0xcf, 0xff, 0xff, 0xcf, 0xff, 0xff, 0xcf, 0xff, 0xff, 0xcf, 0xff, 0xff, 
    0xcf, 0x7f, 0xcf, 0xff, 0xff, 0xcf, 0xff, 0xff, 0xcf, 0xff, 0xff, 0xcf, 0xff, 0xff, 0xcf, 0x7f, 
    0xcf, 0xff, 0xff, 0xcf, 0xff, 0xff, 0xcf, 0xff, 0xff, 0xcf, 0xff, 0xff, 0xcf, 0x7f, 0xcf, 0xff, 
    0xff, 0xcf, 0xff, 0xff, 0xcf, 0xff, 0xff, 0xcf, 0xff, 0xff, 0xcf, 0x7f, 0xcf, 0xff, 0xff, 0xcf, 
    0xff, 0xff, 0xcf, 0xff, 0xff, 0xcf, 0xff, 0xff, 0xcf, 0x7f, 0xcf, 0xff, 0xff, 0xcf, 0xff, 0xff, 
    0xcf, 0xff, 0xff, 0xcf, 0xff, 0xff, 0xcf, 0x7f, 0xcf, 0xff, 0xff, 0xcf, 0xff, 0xff, 0xcf, 0xff, 
    0xff, 0xcf, 0xff, 0xff, 0xcf, 0x7f, 0xcf, 0xff, 0xff, 0xcf, 0xff, 0xff, 0xcf, 0xff, 0xff, 0xcf, 
    0xff, 0xff, 0xcf, 0x7f, 0xcf, 0xff, 0xff, 0xcf, 0xff, 0xff, 0xcf, 0xff, 0xff, 0xcf, 0xff, 0xff, 
    0xcf, 0x7f, 0xcf, 0xff, 0xff, 0xcf, 0xff, 0xff, 0xcf, 0xff, 0xff, 0xcf, 0xff, 0xff, 0xcf, 0x7f, 
    0xcf, 0xff, 0xff, 0xcf, 0xff, 0xff, 0xcf, 0xff, 0xff, 0xcf, 0xff, 0xff, 0xcf, 0x7f, 0xcf, 0xff, 
    0xff, 0xcf, 0xff, 0xff, 0xcf, 0xff, 0xff, 0xcf, 0xff, 0xff, 0xcf, 0x7f, 0xcf, 0xff, 0xff, 0xcf, 
    0xff, 0xff, 0xcf, 0xff, 0xff, 0xcf, 0xff, 0xff, 0xcf, 0x3f, 0xcf, 0xff, 0xff, 0xcf, 0xff, 0xff, 
    0xcf, 0xff, 0xff, 0xcf, 0xff, 0xff, 0xcf, 0x1f, 0xcf, 0xff, 0xff, 0xcf, 0xff, 0xff, 0xcf, 0xff, 
    0xff, 0xcf, 0xff, 0xff, 0xcf, 0x0f, 0xcf, 0xff, 0xff, 0xcf, 0xff, 0xff, 0xcf, 0xff, 0xff, 0xcf, 
    0xff, 0xff, 0xcf, 0x07, 0x0f, 0xff, 0xff, 0xcf, 0xff, 0xff, 0xcf, 0xff, 0xff, 0xcf, 0xff, 0xff, 
    0xc7, 0x03, 0x0f, 0xff, 0xff, 0xcf, 0xff, 0xff, 0xcf, 0xff, 0xff, 0xcf, 0xff, 0xff, 0xc3, 0x03, 
    0x0f, 0xfc, 0xff, 0xcf, 0xff, 0xff, 0xcf, 0xff, 0xff, 0xcf, 0xff, 0xff, 0xc1, 0x03, 0x1f, 0xfc, 
    0xff, 0xcf, 0xff, 0xff, 0xcf, 0xff, 0xff, 0xcf, 0xff, 0xff, 0xc0, 0x03, 0x3f, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xc0, 0x03, 0x7f, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xc0, 0x03, 0xfc, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
    0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0xfc, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
    0xff, 0xff, 0xff, 0x00, 0xf0, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
    0x3f, 0x00, 0xf0, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x3f, 0x00
  };

  const unsigned char epd_bitmap_BatteryStateLvL3 [] PROGMEM = {
    0xf0, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x3f, 0x00, 0xf0, 0xff, 
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x3f, 0x00, 0xfc, 0xff, 0xff, 0xff, 
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0xfc, 0xff, 0xff, 0xff, 0xff, 0xff, 
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x7f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0xc0, 0x03, 0x3f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0xc0, 0x03, 0x1f, 0xfc, 0xff, 0xcf, 0xff, 0xff, 0xcf, 0xff, 0xff, 0x0f, 0x00, 0x00, 
    0xc0, 0x03, 0x0f, 0xfc, 0xff, 0xcf, 0xff, 0xff, 0xcf, 0xff, 0xff, 0x0f, 0x00, 0x00, 0xc0, 0x03, 
    0x0f, 0xff, 0xff, 0xcf, 0xff, 0xff, 0xcf, 0xff, 0xff, 0x0f, 0x00, 0x00, 0xc0, 0x03, 0x0f, 0xff, 
    0xff, 0xcf, 0xff, 0xff, 0xcf, 0xff, 0xff, 0x0f, 0x00, 0x00, 0xc0, 0x03, 0xcf, 0xff, 0xff, 0xcf, 
    0xff, 0xff, 0xcf, 0xff, 0xff, 0x0f, 0x00, 0x00, 0xc0, 0x03, 0xcf, 0xff, 0xff, 0xcf, 0xff, 0xff, 
    0xcf, 0xff, 0xff, 0x0f, 0x00, 0x00, 0xc0, 0x07, 0xcf, 0xff, 0xff, 0xcf, 0xff, 0xff, 0xcf, 0xff, 
    0xff, 0x0f, 0x00, 0x00, 0xc0, 0x0f, 0xcf, 0xff, 0xff, 0xcf, 0xff, 0xff, 0xcf, 0xff, 0xff, 0x0f, 
    0x00, 0x00, 0xc0, 0x1f, 0xcf, 0xff, 0xff, 0xcf, 0xff, 0xff, 0xcf, 0xff, 0xff, 0x0f, 0x00, 0x00, 
    0xc0, 0x3f, 0xcf, 0xff, 0xff, 0xcf, 0xff, 0xff, 0xcf, 0xff, 0xff, 0x0f, 0x00, 0x00, 0xc0, 0x7f, 
    0xcf, 0xff, 0xff, 0xcf, 0xff, 0xff, 0xcf, 0xff, 0xff, 0x0f, 0x00, 0x00, 0xc0, 0x7f, 0xcf, 0xff, 
    0xff, 0xcf, 0xff, 0xff, 0xcf, 0xff, 0xff, 0x0f, 0x00, 0x00, 0xc0, 0x7f, 0xcf, 0xff, 0xff, 0xcf, 
    0xff, 0xff, 0xcf, 0xff, 0xff, 0x0f, 0x00, 0x00, 0xc0, 0x7f, 0xcf, 0xff, 0xff, 0xcf, 0xff, 0xff, 
    0xcf, 0xff, 0xff, 0x0f, 0x00, 0x00, 0xc0, 0x7f, 0xcf, 0xff, 0xff, 0xcf, 0xff, 0xff, 0xcf, 0xff, 
    0xff, 0x0f, 0x00, 0x00, 0xc0, 0x7f, 0xcf, 0xff, 0xff, 0xcf, 0xff, 0xff, 0xcf, 0xff, 0xff, 0x0f, 
    0x00, 0x00, 0xc0, 0x7f, 0xcf, 0xff, 0xff, 0xcf, 0xff, 0xff, 0xcf, 0xff, 0xff, 0x0f, 0x00, 0x00, 
    0xc0, 0x7f, 0xcf, 0xff, 0xff, 0xcf, 0xff, 0xff, 0xcf, 0xff, 0xff, 0x0f, 0x00, 0x00, 0xc0, 0x7f, 
    0xcf, 0xff, 0xff, 0xcf, 0xff, 0xff, 0xcf, 0xff, 0xff, 0x0f, 0x00, 0x00, 0xc0, 0x7f, 0xcf, 0xff, 
    0xff, 0xcf, 0xff, 0xff, 0xcf, 0xff, 0xff, 0x0f, 0x00, 0x00, 0xc0, 0x7f, 0xcf, 0xff, 0xff, 0xcf, 
    0xff, 0xff, 0xcf, 0xff, 0xff, 0x0f, 0x00, 0x00, 0xc0, 0x7f, 0xcf, 0xff, 0xff, 0xcf, 0xff, 0xff, 
    0xcf, 0xff, 0xff, 0x0f, 0x00, 0x00, 0xc0, 0x7f, 0xcf, 0xff, 0xff, 0xcf, 0xff, 0xff, 0xcf, 0xff, 
    0xff, 0x0f, 0x00, 0x00, 0xc0, 0x7f, 0xcf, 0xff, 0xff, 0xcf, 0xff, 0xff, 0xcf, 0xff, 0xff, 0x0f, 
    0x00, 0x00, 0xc0, 0x7f, 0xcf, 0xff, 0xff, 0xcf, 0xff, 0xff, 0xcf, 0xff, 0xff, 0x0f, 0x00, 0x00, 
    0xc0, 0x7f, 0xcf, 0xff, 0xff, 0xcf, 0xff, 0xff, 0xcf, 0xff, 0xff, 0x0f, 0x00, 0x00, 0xc0, 0x7f, 
    0xcf, 0xff, 0xff, 0xcf, 0xff, 0xff, 0xcf, 0xff, 0xff, 0x0f, 0x00, 0x00, 0xc0, 0x7f, 0xcf, 0xff, 
    0xff, 0xcf, 0xff, 0xff, 0xcf, 0xff, 0xff, 0x0f, 0x00, 0x00, 0xc0, 0x7f, 0xcf, 0xff, 0xff, 0xcf, 
    0xff, 0xff, 0xcf, 0xff, 0xff, 0x0f, 0x00, 0x00, 0xc0, 0x3f, 0xcf, 0xff, 0xff, 0xcf, 0xff, 0xff, 
    0xcf, 0xff, 0xff, 0x0f, 0x00, 0x00, 0xc0, 0x1f, 0xcf, 0xff, 0xff, 0xcf, 0xff, 0xff, 0xcf, 0xff, 
    0xff, 0x0f, 0x00, 0x00, 0xc0, 0x0f, 0xcf, 0xff, 0xff, 0xcf, 0xff, 0xff, 0xcf, 0xff, 0xff, 0x0f, 
    0x00, 0x00, 0xc0, 0x07, 0x0f, 0xff, 0xff, 0xcf, 0xff, 0xff, 0xcf, 0xff, 0xff, 0x0f, 0x00, 0x00, 
    0xc0, 0x03, 0x0f, 0xff, 0xff, 0xcf, 0xff, 0xff, 0xcf, 0xff, 0xff, 0x0f, 0x00, 0x00, 0xc0, 0x03, 
    0x0f, 0xfc, 0xff, 0xcf, 0xff, 0xff, 0xcf, 0xff, 0xff, 0x0f, 0x00, 0x00, 0xc0, 0x03, 0x1f, 0xfc, 
    0xff, 0xcf, 0xff, 0xff, 0xcf, 0xff, 0xff, 0x0f, 0x00, 0x00, 0xc0, 0x03, 0x3f, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xc0, 0x03, 0x7f, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xc0, 0x03, 0xfc, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
    0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0xfc, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
    0xff, 0xff, 0xff, 0x00, 0xf0, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
    0x3f, 0x00, 0xf0, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x3f, 0x00
  };

  const unsigned char epd_bitmap_BatteryStateLvL2 [] PROGMEM = {
    0xf0, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x3f, 0x00, 0xf0, 0xff, 
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x3f, 0x00, 0xfc, 0xff, 0xff, 0xff, 
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0xfc, 0xff, 0xff, 0xff, 0xff, 0xff, 
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x7f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0xc0, 0x03, 0x3f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0xc0, 0x03, 0x1f, 0xfc, 0xff, 0xcf, 0xff, 0xff, 0x0f, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0xc0, 0x03, 0x0f, 0xfc, 0xff, 0xcf, 0xff, 0xff, 0x0f, 0x00, 0x00, 0x00, 0x00, 0x00, 0xc0, 0x03, 
    0x0f, 0xff, 0xff, 0xcf, 0xff, 0xff, 0x0f, 0x00, 0x00, 0x00, 0x00, 0x00, 0xc0, 0x03, 0x0f, 0xff, 
    0xff, 0xcf, 0xff, 0xff, 0x0f, 0x00, 0x00, 0x00, 0x00, 0x00, 0xc0, 0x03, 0xcf, 0xff, 0xff, 0xcf, 
    0xff, 0xff, 0x0f, 0x00, 0x00, 0x00, 0x00, 0x00, 0xc0, 0x03, 0xcf, 0xff, 0xff, 0xcf, 0xff, 0xff, 
    0x0f, 0x00, 0x00, 0x00, 0x00, 0x00, 0xc0, 0x07, 0xcf, 0xff, 0xff, 0xcf, 0xff, 0xff, 0x0f, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0xc0, 0x0f, 0xcf, 0xff, 0xff, 0xcf, 0xff, 0xff, 0x0f, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0xc0, 0x1f, 0xcf, 0xff, 0xff, 0xcf, 0xff, 0xff, 0x0f, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0xc0, 0x3f, 0xcf, 0xff, 0xff, 0xcf, 0xff, 0xff, 0x0f, 0x00, 0x00, 0x00, 0x00, 0x00, 0xc0, 0x7f, 
    0xcf, 0xff, 0xff, 0xcf, 0xff, 0xff, 0x0f, 0x00, 0x00, 0x00, 0x00, 0x00, 0xc0, 0x7f, 0xcf, 0xff, 
    0xff, 0xcf, 0xff, 0xff, 0x0f, 0x00, 0x00, 0x00, 0x00, 0x00, 0xc0, 0x7f, 0xcf, 0xff, 0xff, 0xcf, 
    0xff, 0xff, 0x0f, 0x00, 0x00, 0x00, 0x00, 0x00, 0xc0, 0x7f, 0xcf, 0xff, 0xff, 0xcf, 0xff, 0xff, 
    0x0f, 0x00, 0x00, 0x00, 0x00, 0x00, 0xc0, 0x7f, 0xcf, 0xff, 0xff, 0xcf, 0xff, 0xff, 0x0f, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0xc0, 0x7f, 0xcf, 0xff, 0xff, 0xcf, 0xff, 0xff, 0x0f, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0xc0, 0x7f, 0xcf, 0xff, 0xff, 0xcf, 0xff, 0xff, 0x0f, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0xc0, 0x7f, 0xcf, 0xff, 0xff, 0xcf, 0xff, 0xff, 0x0f, 0x00, 0x00, 0x00, 0x00, 0x00, 0xc0, 0x7f, 
    0xcf, 0xff, 0xff, 0xcf, 0xff, 0xff, 0x0f, 0x00, 0x00, 0x00, 0x00, 0x00, 0xc0, 0x7f, 0xcf, 0xff, 
    0xff, 0xcf, 0xff, 0xff, 0x0f, 0x00, 0x00, 0x00, 0x00, 0x00, 0xc0, 0x7f, 0xcf, 0xff, 0xff, 0xcf, 
    0xff, 0xff, 0x0f, 0x00, 0x00, 0x00, 0x00, 0x00, 0xc0, 0x7f, 0xcf, 0xff, 0xff, 0xcf, 0xff, 0xff, 
    0x0f, 0x00, 0x00, 0x00, 0x00, 0x00, 0xc0, 0x7f, 0xcf, 0xff, 0xff, 0xcf, 0xff, 0xff, 0x0f, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0xc0, 0x7f, 0xcf, 0xff, 0xff, 0xcf, 0xff, 0xff, 0x0f, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0xc0, 0x7f, 0xcf, 0xff, 0xff, 0xcf, 0xff, 0xff, 0x0f, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0xc0, 0x7f, 0xcf, 0xff, 0xff, 0xcf, 0xff, 0xff, 0x0f, 0x00, 0x00, 0x00, 0x00, 0x00, 0xc0, 0x7f, 
    0xcf, 0xff, 0xff, 0xcf, 0xff, 0xff, 0x0f, 0x00, 0x00, 0x00, 0x00, 0x00, 0xc0, 0x7f, 0xcf, 0xff, 
    0xff, 0xcf, 0xff, 0xff, 0x0f, 0x00, 0x00, 0x00, 0x00, 0x00, 0xc0, 0x7f, 0xcf, 0xff, 0xff, 0xcf, 
    0xff, 0xff, 0x0f, 0x00, 0x00, 0x00, 0x00, 0x00, 0xc0, 0x3f, 0xcf, 0xff, 0xff, 0xcf, 0xff, 0xff, 
    0x0f, 0x00, 0x00, 0x00, 0x00, 0x00, 0xc0, 0x1f, 0xcf, 0xff, 0xff, 0xcf, 0xff, 0xff, 0x0f, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0xc0, 0x0f, 0xcf, 0xff, 0xff, 0xcf, 0xff, 0xff, 0x0f, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0xc0, 0x07, 0x0f, 0xff, 0xff, 0xcf, 0xff, 0xff, 0x0f, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0xc0, 0x03, 0x0f, 0xff, 0xff, 0xcf, 0xff, 0xff, 0x0f, 0x00, 0x00, 0x00, 0x00, 0x00, 0xc0, 0x03, 
    0x0f, 0xfc, 0xff, 0xcf, 0xff, 0xff, 0x0f, 0x00, 0x00, 0x00, 0x00, 0x00, 0xc0, 0x03, 0x1f, 0xfc, 
    0xff, 0xcf, 0xff, 0xff, 0x0f, 0x00, 0x00, 0x00, 0x00, 0x00, 0xc0, 0x03, 0x3f, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xc0, 0x03, 0x7f, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xc0, 0x03, 0xfc, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
    0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0xfc, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
    0xff, 0xff, 0xff, 0x00, 0xf0, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
    0x3f, 0x00, 0xf0, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x3f, 0x00
  };

  const unsigned char epd_bitmap_BatteryStateLvL1 [] PROGMEM = {
    0xf0, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x3f, 0x00, 0xf0, 0xff, 
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x3f, 0x00, 0xfc, 0xff, 0xff, 0xff, 
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0xfc, 0xff, 0xff, 0xff, 0xff, 0xff, 
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x7f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0xc0, 0x03, 0x3f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0xc0, 0x03, 0x1f, 0xfc, 0xff, 0x0f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0xc0, 0x03, 0x0f, 0xfc, 0xff, 0x0f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xc0, 0x03, 
    0x0f, 0xff, 0xff, 0x0f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xc0, 0x03, 0x0f, 0xff, 
    0xff, 0x0f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xc0, 0x03, 0xcf, 0xff, 0xff, 0x0f, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xc0, 0x03, 0xcf, 0xff, 0xff, 0x0f, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xc0, 0x07, 0xcf, 0xff, 0xff, 0x0f, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0xc0, 0x0f, 0xcf, 0xff, 0xff, 0x0f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0xc0, 0x1f, 0xcf, 0xff, 0xff, 0x0f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0xc0, 0x3f, 0xcf, 0xff, 0xff, 0x0f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xc0, 0x7f, 
    0xcf, 0xff, 0xff, 0x0f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xc0, 0x7f, 0xcf, 0xff, 
    0xff, 0x0f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xc0, 0x7f, 0xcf, 0xff, 0xff, 0x0f, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xc0, 0x7f, 0xcf, 0xff, 0xff, 0x0f, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xc0, 0x7f, 0xcf, 0xff, 0xff, 0x0f, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0xc0, 0x7f, 0xcf, 0xff, 0xff, 0x0f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0xc0, 0x7f, 0xcf, 0xff, 0xff, 0x0f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0xc0, 0x7f, 0xcf, 0xff, 0xff, 0x0f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xc0, 0x7f, 
    0xcf, 0xff, 0xff, 0x0f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xc0, 0x7f, 0xcf, 0xff, 
    0xff, 0x0f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xc0, 0x7f, 0xcf, 0xff, 0xff, 0x0f, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xc0, 0x7f, 0xcf, 0xff, 0xff, 0x0f, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xc0, 0x7f, 0xcf, 0xff, 0xff, 0x0f, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0xc0, 0x7f, 0xcf, 0xff, 0xff, 0x0f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0xc0, 0x7f, 0xcf, 0xff, 0xff, 0x0f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0xc0, 0x7f, 0xcf, 0xff, 0xff, 0x0f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xc0, 0x7f, 
    0xcf, 0xff, 0xff, 0x0f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xc0, 0x7f, 0xcf, 0xff, 
    0xff, 0x0f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xc0, 0x7f, 0xcf, 0xff, 0xff, 0x0f, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xc0, 0x3f, 0xcf, 0xff, 0xff, 0x0f, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xc0, 0x1f, 0xcf, 0xff, 0xff, 0x0f, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0xc0, 0x0f, 0xcf, 0xff, 0xff, 0x0f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0xc0, 0x07, 0x0f, 0xff, 0xff, 0x0f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0xc0, 0x03, 0x0f, 0xff, 0xff, 0x0f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xc0, 0x03, 
    0x0f, 0xfc, 0xff, 0x0f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xc0, 0x03, 0x1f, 0xfc, 
    0xff, 0x0f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xc0, 0x03, 0x3f, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xc0, 0x03, 0x7f, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xc0, 0x03, 0xfc, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
    0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0xfc, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
    0xff, 0xff, 0xff, 0x00, 0xf0, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
    0x3f, 0x00, 0xf0, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x3f, 0x00
  };

  const unsigned char epd_bitmap_BatteryStateLvL0 [] PROGMEM = {
    0xf0, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x3f, 0x00, 0xf0, 0xff, 
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x3f, 0x00, 0xfc, 0xff, 0xff, 0xff, 
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0xfc, 0xff, 0xff, 0xff, 0xff, 0xff, 
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x7f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0xc0, 0x03, 0x3f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0xc0, 0x03, 0x1f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0xc0, 0x03, 0x0f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xc0, 0x03, 
    0x0f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xc0, 0x03, 0x0f, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xc0, 0x03, 0x0f, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xc0, 0x03, 0x0f, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xc0, 0x07, 0x0f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0xc0, 0x0f, 0x0f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0xc0, 0x1f, 0x0f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0xc0, 0x3f, 0x0f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xc0, 0x7f, 
    0x0f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xc0, 0x7f, 0x0f, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xc0, 0x7f, 0x0f, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xc0, 0x7f, 0x0f, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xc0, 0x7f, 0x0f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0xc0, 0x7f, 0x0f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0xc0, 0x7f, 0x0f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0xc0, 0x7f, 0x0f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xc0, 0x7f, 
    0x0f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xc0, 0x7f, 0x0f, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xc0, 0x7f, 0x0f, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xc0, 0x7f, 0x0f, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xc0, 0x7f, 0x0f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0xc0, 0x7f, 0x0f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0xc0, 0x7f, 0x0f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0xc0, 0x7f, 0x0f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xc0, 0x7f, 
    0x0f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xc0, 0x7f, 0x0f, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xc0, 0x7f, 0x0f, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xc0, 0x3f, 0x0f, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xc0, 0x1f, 0x0f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0xc0, 0x0f, 0x0f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0xc0, 0x07, 0x0f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0xc0, 0x03, 0x0f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xc0, 0x03, 
    0x0f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xc0, 0x03, 0x1f, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xc0, 0x03, 0x3f, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xc0, 0x03, 0x7f, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xc0, 0x03, 0xfc, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
    0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0xfc, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
    0xff, 0xff, 0xff, 0x00, 0xf0, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
    0x3f, 0x00, 0xf0, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x3f, 0x00
  };

  const unsigned char epd_bitmap_DefaultValuesUIReady [] PROGMEM = {
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
    0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 
    0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 
    0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 
    0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 
    0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 
    0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 
    0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 
    0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 
    0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 
    0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 
    0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 
    0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 
    0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 
    0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
    0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 
    0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 
    0x71, 0x00, 0xc0, 0x01, 0x80, 0x01, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0xb0, 0x19, 0x00, 0x80, 
    0xf1, 0x01, 0x60, 0x00, 0x80, 0x11, 0x00, 0x00, 0x06, 0x00, 0x00, 0x00, 0x80, 0x19, 0x00, 0x80, 
    0x11, 0x03, 0x20, 0x00, 0x80, 0x11, 0x00, 0x00, 0x06, 0x00, 0x00, 0x00, 0x80, 0x19, 0x00, 0x80, 
    0x31, 0xe6, 0xfb, 0x79, 0xb3, 0x7d, 0x18, 0x7b, 0x16, 0xf9, 0x38, 0xc8, 0xb6, 0x19, 0x00, 0x80, 
    0x31, 0x6c, 0x23, 0x6c, 0xb3, 0x11, 0x10, 0x4d, 0x1e, 0xd9, 0x6e, 0xc8, 0xb6, 0x19, 0x00, 0x80, 
    0x11, 0xbc, 0x23, 0x66, 0xb3, 0x11, 0xb0, 0x65, 0x9e, 0xed, 0x0e, 0xe8, 0xb6, 0x19, 0x00, 0x80, 
    0x11, 0xfc, 0x21, 0x66, 0xb3, 0x31, 0xb0, 0x67, 0x9e, 0x7d, 0x3e, 0xf8, 0xb3, 0x19, 0x00, 0x80, 
    0x11, 0x76, 0x20, 0x66, 0xb3, 0x31, 0xe0, 0x46, 0x96, 0x1d, 0x30, 0xb8, 0xb3, 0x19, 0x00, 0x80, 
    0x31, 0x77, 0x26, 0x66, 0xb3, 0x31, 0xe0, 0xec, 0x96, 0x9d, 0x31, 0xb8, 0xb3, 0x19, 0x00, 0x80, 
    0xf1, 0xe3, 0x23, 0xfc, 0xbe, 0x11, 0x60, 0xfc, 0xf2, 0xf9, 0x3e, 0x90, 0xb1, 0x19, 0x00, 0x80, 
    0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 
    0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 
    0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 
    0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 
    0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 
    0x11, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0c, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 
    0x19, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0c, 0x00, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 
    0x19, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0c, 0x00, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 
    0xf9, 0xf1, 0xc0, 0xe7, 0xf1, 0xbc, 0xdf, 0xcf, 0xe3, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 
    0x39, 0x9b, 0xc1, 0x37, 0xd9, 0xb6, 0xdb, 0x6c, 0x36, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 
    0x19, 0xdb, 0xc0, 0xde, 0x0d, 0xe6, 0x79, 0x6c, 0x13, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 
    0x19, 0x7f, 0x40, 0xf8, 0x0c, 0xe3, 0x61, 0xfc, 0x19, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 
    0x19, 0x3f, 0x40, 0x38, 0x0c, 0xe2, 0x61, 0xfc, 0x18, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 
    0x99, 0x9b, 0x41, 0x30, 0xdf, 0xb6, 0xc1, 0x6e, 0x36, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 
    0xf1, 0xf1, 0x41, 0xf0, 0xf9, 0x9c, 0xc1, 0xcf, 0xe7, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 
    0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 
    0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 
    0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 
    0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 
    0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 
    0xf1, 0x00, 0x00, 0x40, 0xc0, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 
    0xd9, 0x01, 0x00, 0x60, 0x00, 0x0c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 
    0x19, 0x03, 0x00, 0x60, 0x00, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 
    0x19, 0xf3, 0x79, 0xfc, 0x31, 0x0c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 
    0x19, 0xb3, 0xdd, 0xe6, 0x31, 0x0e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 
    0x99, 0xdb, 0xcd, 0x62, 0x1b, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 
    0xf9, 0xf8, 0xc4, 0x63, 0x1b, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 
    0xd9, 0x39, 0xc4, 0x63, 0x1e, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 
    0x19, 0x3b, 0xcf, 0x66, 0x0e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 
    0x19, 0xf6, 0xfd, 0x7c, 0x8c, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 
    0x01, 0x00, 0x00, 0x00, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 
    0x01, 0x00, 0x00, 0x00, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 
    0x01, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 
    0x01, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 
    0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff
  };

  const unsigned char epd_bitmap_CalibrationWaitingScreen [] PROGMEM = {
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
    0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 
    0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 
    0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 
    0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 
    0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 
    0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 
    0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 
    0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 
    0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 
    0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 
    0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 
    0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 
    0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 
    0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
    0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 
    0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 
    0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 
    0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 
    0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 
    0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 
    0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 
    0x01, 0xff, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0xff, 0x80, 
    0x01, 0xff, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0xff, 0x80, 
    0x01, 0xff, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0xff, 0x80, 
    0x01, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xe0, 0x80, 
    0x01, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xe0, 0x80, 
    0x01, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xe0, 0x80, 
    0x01, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xe0, 0x80, 
    0x01, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xe0, 0x80, 
    0x01, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xe0, 0x80, 
    0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 
    0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 
    0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 
    0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 
    0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 
    0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 
    0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 
    0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 
    0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 
    0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 
    0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 
    0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 
    0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 
    0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 
    0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 
    0x01, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xe0, 0x80, 
    0x01, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xe0, 0x80, 
    0x01, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xe0, 0x80, 
    0x01, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xe0, 0x80, 
    0x01, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xe0, 0x80, 
    0x01, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xe0, 0x80, 
    0x01, 0xff, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0xff, 0x80, 
    0x01, 0xff, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0xff, 0x80, 
    0x01, 0xff, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0xff, 0x80, 
    0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 
    0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 
    0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 
    0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 
    0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 
    0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 
    0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff
  };

  const unsigned char epd_bitmap_CalibrationPulseScreen [] PROGMEM = {
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
    0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 
    0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 
    0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 
    0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 
    0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 
    0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 
    0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 
    0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 
    0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 
    0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 
    0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 
    0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 
    0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 
    0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
    0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 
    0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 
    0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 
    0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 
    0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 
    0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 
    0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 
    0x01, 0xff, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0xff, 0x80, 
    0x01, 0xff, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0xff, 0x80, 
    0x01, 0xff, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0xff, 0x80, 
    0x01, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xe0, 0x80, 
    0x01, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xe0, 0x80, 
    0x01, 0xe7, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xe7, 0x80, 
    0x01, 0xe7, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xe7, 0x80, 
    0x01, 0xe7, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xe7, 0x80, 
    0x01, 0xe7, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xe7, 0x80, 
    0x01, 0xe0, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x07, 0x80, 
    0x01, 0xe0, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x07, 0x80, 
    0x01, 0xe0, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x07, 0x80, 
    0x01, 0xe0, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x07, 0x80, 
    0x01, 0xe0, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x07, 0x80, 
    0x01, 0xe0, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x07, 0x80, 
    0x01, 0xe0, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x07, 0x80, 
    0x01, 0xe0, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x07, 0x80, 
    0x01, 0xe0, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x07, 0x80, 
    0x01, 0xe0, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x07, 0x80, 
    0x01, 0xe0, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x07, 0x80, 
    0x01, 0xe0, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x07, 0x80, 
    0x01, 0xe0, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x07, 0x80, 
    0x01, 0xe0, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x07, 0x80, 
    0x01, 0xe0, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x07, 0x80, 
    0x01, 0xe7, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xe7, 0x80, 
    0x01, 0xe7, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xe7, 0x80, 
    0x01, 0xe7, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xe7, 0x80, 
    0x01, 0xe7, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xe7, 0x80, 
    0x01, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xe0, 0x80, 
    0x01, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xe0, 0x80, 
    0x01, 0xff, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0xff, 0x80, 
    0x01, 0xff, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0xff, 0x80, 
    0x01, 0xff, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0xff, 0x80, 
    0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 
    0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 
    0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 
    0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 
    0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 
    0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 
    0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff
  };

  const unsigned char epd_bitmap_CalibrationGripScreen [] PROGMEM = {
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
    0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 
    0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 
    0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 
    0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 
    0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 
    0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 
    0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 
    0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 
    0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 
    0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 
    0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 
    0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 
    0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 
    0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
    0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 
    0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 
    0xc1, 0x03, 0x0c, 0x00, 0x00, 0x20, 0x00, 0x00, 0x00, 0x00, 0x93, 0x01, 0x00, 0x00, 0x00, 0x80, 
    0x61, 0x06, 0x00, 0x00, 0x00, 0x60, 0x00, 0x00, 0x00, 0x00, 0xb0, 0x01, 0x00, 0x00, 0x00, 0x80, 
    0x31, 0x00, 0x00, 0x00, 0x00, 0x60, 0x00, 0x00, 0x00, 0x00, 0xb0, 0x01, 0x00, 0x00, 0x00, 0x80, 
    0x31, 0xf0, 0xcd, 0x87, 0xb1, 0x67, 0xb3, 0x8f, 0x87, 0x4c, 0xb3, 0x01, 0x00, 0x00, 0x00, 0x80, 
    0x19, 0xf0, 0xed, 0x06, 0xd1, 0x6d, 0xb3, 0xcd, 0x86, 0x6d, 0xb3, 0x01, 0x00, 0x00, 0x00, 0x80, 
    0xf9, 0x37, 0x6d, 0x0c, 0xdb, 0x6c, 0xf3, 0xee, 0x80, 0x6f, 0xb3, 0x01, 0x00, 0x00, 0x00, 0x80, 
    0x19, 0x36, 0xcc, 0x0c, 0x5b, 0x6c, 0xf3, 0xc7, 0x83, 0x7f, 0xb3, 0x01, 0x00, 0x00, 0x00, 0x80, 
    0x19, 0x32, 0xcc, 0x0c, 0x4e, 0x6c, 0xf3, 0x01, 0x83, 0x3b, 0xb3, 0x01, 0x00, 0x00, 0x00, 0x80, 
    0x19, 0x33, 0xcc, 0x06, 0xce, 0x6c, 0xf3, 0x19, 0x86, 0x3b, 0xb3, 0x01, 0x00, 0x00, 0x00, 0x80, 
    0xf1, 0x31, 0xcc, 0x07, 0xc6, 0x2f, 0xbf, 0xef, 0x03, 0x33, 0x93, 0x01, 0x00, 0x00, 0x00, 0x80, 
    0x01, 0x00, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 
    0x01, 0x00, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 
    0x01, 0x00, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 
    0x01, 0x00, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 
    0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 
    0x11, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0c, 0x00, 0x82, 0x1f, 0x00, 0x06, 0x00, 0x00, 0x80, 
    0x19, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0c, 0x00, 0x83, 0x01, 0x10, 0x00, 0x00, 0x00, 0x80, 
    0x19, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0c, 0x00, 0x83, 0x01, 0x10, 0x00, 0x00, 0x00, 0x80, 
    0xf9, 0xf1, 0xc0, 0xe7, 0xf1, 0xbc, 0xdf, 0xcf, 0xe3, 0x83, 0x1f, 0x7c, 0xf2, 0xcf, 0xc7, 0x83, 
    0x39, 0x9b, 0xc1, 0x37, 0xd9, 0xb6, 0xdb, 0x6c, 0x36, 0x83, 0x13, 0x10, 0xfb, 0xcd, 0x66, 0x83, 
    0x19, 0xdb, 0xc0, 0xde, 0x0d, 0xe6, 0x79, 0x6c, 0x13, 0x83, 0x31, 0x10, 0xb3, 0x69, 0x77, 0x80, 
    0x19, 0x7f, 0x40, 0xf8, 0x0c, 0xe3, 0x61, 0xfc, 0x19, 0x03, 0x30, 0x30, 0x93, 0xe9, 0xe3, 0x81, 
    0x19, 0x3f, 0x40, 0x38, 0x0c, 0xe2, 0x61, 0xfc, 0x18, 0x03, 0x30, 0x30, 0x9b, 0xf9, 0x80, 0x81, 
    0x99, 0x9b, 0x41, 0x30, 0xdf, 0xb6, 0xc1, 0x6e, 0x36, 0x83, 0x19, 0x30, 0x9b, 0xf9, 0x0c, 0x83, 
    0xf1, 0xf1, 0x41, 0xf0, 0xf9, 0x9c, 0xc1, 0xcf, 0xe7, 0x83, 0x0f, 0x10, 0x93, 0xd9, 0xf7, 0x81, 
    0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 
    0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 
    0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 
    0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 
    0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 
    0xf1, 0x00, 0x00, 0x40, 0xc0, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 
    0xd9, 0x01, 0x00, 0x60, 0x00, 0x0c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 
    0x19, 0x03, 0x00, 0x60, 0x00, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 
    0x19, 0xf3, 0x79, 0xfc, 0x31, 0x0c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 
    0x19, 0xb3, 0xdd, 0xe6, 0x31, 0x0e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 
    0x99, 0xdb, 0xcd, 0x62, 0x1b, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 
    0xf9, 0xf8, 0xc4, 0x63, 0x1b, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 
    0xd9, 0x39, 0xc4, 0x63, 0x1e, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 
    0x19, 0x3b, 0xcf, 0x66, 0x0e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 
    0x19, 0xf6, 0xfd, 0x7c, 0x8c, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 
    0x01, 0x00, 0x00, 0x00, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 
    0x01, 0x00, 0x00, 0x00, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 
    0x01, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 
    0x01, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 
    0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff
  };

  const unsigned char epd_bitmap_CalibrationUnGripScreen [] PROGMEM = {
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
    0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 
    0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 
    0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 
    0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 
    0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 
    0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 
    0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 
    0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 
    0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 
    0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 
    0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 
    0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 
    0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 
    0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
    0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 
    0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 
    0x11, 0x0c, 0x00, 0x00, 0x03, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0xc0, 0x66, 0x00, 0x00, 0x80, 
    0x19, 0x0c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x00, 0x00, 0x00, 0x00, 0x66, 0x00, 0x00, 0x80, 
    0x19, 0x0c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x00, 0x00, 0x00, 0x00, 0x66, 0x00, 0x00, 0x80, 
    0x19, 0xec, 0xf3, 0x7d, 0xfb, 0x60, 0xec, 0xd9, 0xec, 0xe3, 0x21, 0xd3, 0x66, 0x00, 0x00, 0x80, 
    0x19, 0xec, 0xba, 0x7d, 0xbb, 0x41, 0x74, 0xdb, 0x6c, 0xb3, 0x61, 0xdb, 0x66, 0x00, 0x00, 0x80, 
    0x19, 0x6c, 0x9a, 0x4d, 0x1b, 0xc1, 0x36, 0xdb, 0xbc, 0x3b, 0xe0, 0xdb, 0x66, 0x00, 0x00, 0x80, 
    0x11, 0x24, 0x8a, 0x0d, 0x1b, 0xc1, 0x16, 0xdb, 0xfc, 0xf1, 0xe0, 0xdf, 0x66, 0x00, 0x00, 0x80, 
    0x31, 0x26, 0x8a, 0x0d, 0x1b, 0x81, 0x13, 0xdb, 0x7c, 0xc0, 0xe0, 0xce, 0x66, 0x00, 0x00, 0x80, 
    0x71, 0x26, 0xde, 0x0d, 0x9b, 0x81, 0x33, 0xdb, 0x7c, 0x86, 0xe1, 0xce, 0x66, 0x00, 0x00, 0x80, 
    0xe1, 0x23, 0xf6, 0x0d, 0xfb, 0x80, 0xf1, 0xcb, 0xef, 0xfb, 0xc0, 0xcc, 0x66, 0x00, 0x00, 0x80, 
    0x01, 0x00, 0x80, 0x01, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 
    0x01, 0x00, 0x80, 0x00, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 
    0x01, 0x00, 0xc0, 0x00, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 
    0x01, 0x00, 0x78, 0x00, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 
    0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 
    0x11, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0c, 0x00, 0x82, 0x1f, 0x00, 0x06, 0x00, 0x00, 0x80, 
    0x19, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0c, 0x00, 0x83, 0x01, 0x10, 0x00, 0x00, 0x00, 0x80, 
    0x19, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0c, 0x00, 0x83, 0x01, 0x10, 0x00, 0x00, 0x00, 0x80, 
    0xf9, 0xf1, 0xc0, 0xe7, 0xf1, 0xbc, 0xdf, 0xcf, 0xe3, 0x83, 0x1f, 0x7c, 0xf2, 0xcf, 0xc7, 0x83, 
    0x39, 0x9b, 0xc1, 0x37, 0xd9, 0xb6, 0xdb, 0x6c, 0x36, 0x83, 0x13, 0x10, 0xfb, 0xcd, 0x66, 0x83, 
    0x19, 0xdb, 0xc0, 0xde, 0x0d, 0xe6, 0x79, 0x6c, 0x13, 0x83, 0x31, 0x10, 0xb3, 0x69, 0x77, 0x80, 
    0x19, 0x7f, 0x40, 0xf8, 0x0c, 0xe3, 0x61, 0xfc, 0x19, 0x03, 0x30, 0x30, 0x93, 0xe9, 0xe3, 0x81, 
    0x19, 0x3f, 0x40, 0x38, 0x0c, 0xe2, 0x61, 0xfc, 0x18, 0x03, 0x30, 0x30, 0x9b, 0xf9, 0x80, 0x81, 
    0x99, 0x9b, 0x41, 0x30, 0xdf, 0xb6, 0xc1, 0x6e, 0x36, 0x83, 0x19, 0x30, 0x9b, 0xf9, 0x0c, 0x83, 
    0xf1, 0xf1, 0x41, 0xf0, 0xf9, 0x9c, 0xc1, 0xcf, 0xe7, 0x83, 0x0f, 0x10, 0x93, 0xd9, 0xf7, 0x81, 
    0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 
    0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 
    0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 
    0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 
    0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 
    0xf1, 0x00, 0x00, 0x40, 0xc0, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 
    0xd9, 0x01, 0x00, 0x60, 0x00, 0x0c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 
    0x19, 0x03, 0x00, 0x60, 0x00, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 
    0x19, 0xf3, 0x79, 0xfc, 0x31, 0x0c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 
    0x19, 0xb3, 0xdd, 0xe6, 0x31, 0x0e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 
    0x99, 0xdb, 0xcd, 0x62, 0x1b, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 
    0xf9, 0xf8, 0xc4, 0x63, 0x1b, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 
    0xd9, 0x39, 0xc4, 0x63, 0x1e, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 
    0x19, 0x3b, 0xcf, 0x66, 0x0e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 
    0x19, 0xf6, 0xfd, 0x7c, 0x8c, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 
    0x01, 0x00, 0x00, 0x00, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 
    0x01, 0x00, 0x00, 0x00, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 
    0x01, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 
    0x01, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 
    0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff
  };

  const unsigned char epd_bitmap_EMGProbeCheck [] PROGMEM = {
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
    0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 
    0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 
    0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 
    0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 
    0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 
    0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 
    0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 
    0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 
    0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 
    0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 
    0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 
    0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 
    0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 
    0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
    0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 
    0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 
    0xc1, 0x07, 0x00, 0xbc, 0x01, 0x00, 0x00, 0x00, 0x00, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 
    0x61, 0x06, 0x00, 0x0c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 
    0x31, 0x00, 0x00, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 
    0x31, 0xf0, 0x7c, 0xbf, 0x7d, 0xff, 0xc0, 0xf7, 0x7b, 0x3e, 0x3e, 0x0e, 0x00, 0x00, 0x00, 0x80, 
    0x19, 0xd8, 0x5c, 0x86, 0xdd, 0xbf, 0xe1, 0x76, 0xdb, 0x66, 0xb6, 0x1b, 0x00, 0x00, 0x00, 0x80, 
    0x19, 0x98, 0x4d, 0x86, 0xcd, 0x9b, 0x61, 0x3c, 0xcf, 0xc6, 0xbb, 0x03, 0x00, 0x00, 0x00, 0x80, 
    0x19, 0x8c, 0x45, 0x86, 0x0d, 0x93, 0xc1, 0x3c, 0xcc, 0xc6, 0x9f, 0x0f, 0x00, 0x00, 0x00, 0x80, 
    0x19, 0x88, 0x45, 0x86, 0x0d, 0xb3, 0xc1, 0x3c, 0xcc, 0xc6, 0x07, 0x0c, 0x00, 0x00, 0x00, 0x80, 
    0x31, 0xdb, 0xc4, 0x86, 0x0d, 0xb3, 0xc1, 0x36, 0xcc, 0x66, 0x67, 0x0c, 0x00, 0x00, 0x00, 0x80, 
    0xf1, 0x71, 0xc4, 0x86, 0x0d, 0x33, 0xc1, 0x37, 0x78, 0x3e, 0xbe, 0x0f, 0x00, 0x00, 0x00, 0x80, 
    0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 
    0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 
    0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 
    0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 
    0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 
    0x01, 0x00, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x06, 0x80, 
    0x01, 0x00, 0x00, 0x00, 0x00, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x06, 0x00, 0x06, 0x80, 
    0x01, 0x00, 0x00, 0x00, 0x00, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x06, 0x00, 0x06, 0x80, 
    0xf9, 0x7c, 0x9e, 0xcf, 0xf7, 0x7b, 0x0c, 0x1e, 0xe7, 0xf3, 0xf9, 0xbc, 0xdf, 0xe7, 0x07, 0x80, 
    0xb9, 0xdd, 0xb3, 0xd9, 0x76, 0x7b, 0x0c, 0xb6, 0xed, 0x76, 0xd9, 0x6c, 0xc6, 0x66, 0x06, 0x80, 
    0x19, 0xcd, 0xb3, 0x79, 0x37, 0xdb, 0x06, 0xc3, 0x68, 0x36, 0xed, 0x06, 0x66, 0x37, 0x06, 0x80, 
    0x19, 0x0d, 0xb3, 0xf9, 0x33, 0xd8, 0x06, 0xc3, 0x68, 0x16, 0x7d, 0x06, 0xe6, 0x33, 0x06, 0x80, 
    0x19, 0x0d, 0xb3, 0xf9, 0x30, 0x98, 0x07, 0xc3, 0x68, 0x16, 0x1d, 0x06, 0xe6, 0x30, 0x06, 0x80, 
    0x99, 0x0d, 0x9b, 0xf9, 0x3c, 0x98, 0x03, 0xb3, 0x6d, 0x16, 0x9f, 0x67, 0xe6, 0x6c, 0x07, 0x80, 
    0xf9, 0x0c, 0x9e, 0xcf, 0x37, 0x08, 0x03, 0x9e, 0x67, 0x16, 0xfb, 0x3c, 0xc6, 0xe7, 0x07, 0x80, 
    0x19, 0x00, 0x80, 0x01, 0x00, 0x80, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 
    0x19, 0x00, 0x80, 0x01, 0x00, 0x80, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 
    0x19, 0x00, 0x80, 0x01, 0x00, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 
    0x19, 0x00, 0x80, 0x01, 0x00, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 
    0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 
    0xf1, 0x00, 0x00, 0x40, 0xc0, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 
    0xd9, 0x01, 0x00, 0x60, 0x00, 0x0c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 
    0x19, 0x03, 0x00, 0x60, 0x00, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 
    0x19, 0xf3, 0x79, 0xfc, 0x31, 0x0c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 
    0x19, 0xb3, 0xdd, 0xe6, 0x31, 0x0e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 
    0x99, 0xdb, 0xcd, 0x62, 0x1b, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 
    0xf9, 0xf8, 0xc4, 0x63, 0x1b, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 
    0xd9, 0x39, 0xc4, 0x63, 0x1e, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 
    0x19, 0x3b, 0xcf, 0x66, 0x0e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 
    0x19, 0xf6, 0xfd, 0x7c, 0x8c, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 
    0x01, 0x00, 0x00, 0x00, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 
    0x01, 0x00, 0x00, 0x00, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 
    0x01, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 
    0x01, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 
    0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff
  };


  const unsigned char* epd_bitmap_allArray[11] = {
    epd_bitmap_BatteryStateLvL4,
    epd_bitmap_BatteryStateLvL3,
    epd_bitmap_BatteryStateLvL2,
    epd_bitmap_BatteryStateLvL1,
    epd_bitmap_BatteryStateLvL0,
    epd_bitmap_DefaultValuesUIReady,
    epd_bitmap_CalibrationWaitingScreen,
    epd_bitmap_CalibrationPulseScreen,
    epd_bitmap_CalibrationGripScreen,
    epd_bitmap_CalibrationUnGripScreen,
    epd_bitmap_EMGProbeCheck
  };
///////////////////////BMP END
///////////////////////FUNCTIONS START
  void waitScreenDisplay()
  {
    u8g2.clearBuffer();
    u8g2.setFont(u8g2_font_ncenB08_tr);
    u8g2.drawXBMP(0, 0, 128, 64, epd_bitmap_CalibrationWaitingScreen);
    u8g2.sendBuffer();
  }
  void pulseScreenDisplay()
  {
    u8g2.clearBuffer();
    u8g2.setFont(u8g2_font_ncenB08_tr);
    u8g2.drawXBMP(0, 0, 128, 64, epd_bitmap_CalibrationPulseScreen);
    u8g2.sendBuffer();
  }
  void getAvrgArray()
  {
    tenIntevalVoltageData recordedUnGripDataPoints = emgCheckerObject.UnGripSignalCalibrator(liveArrayUpdaterDelayValue, liveArrayUpdaterMillisValue, defaults.maxValue);

      for (int i = 0; i < 10; i++) 
      {
        avrgArray[i] = recordedUnGripDataPoints.recordedVoltagePoints[i]; 
      }
      for (int i = 0; i < 10; i++) 
      {
        avrgArray[i] = recordedUnGripDataPoints.recordedVoltagePoints[i]; 
      }
      for (int i = 0; i < 10; i++)
      {
        emgCheckerObject.averageArray[i] = avrgArray[i];
      }
              
  }
  void defaultValueListener()
  {
    waitScreenDisplay();
    delay(2000);

    pulseScreenDisplay();
    
    defaults = emgCheckerObject.getDefaultValues(liveArrayUpdaterDelayValue, liveArrayUpdaterMillisValue);
    delay(100);

    emgCheckerObject.setAvrgArray(defaults.averageValue);
    getAvrgArray();

    u8g2.clearBuffer();
    u8g2.setFont(u8g2_font_ncenB08_tr);
    u8g2.drawXBMP(0, 0, 128, 64, epd_bitmap_CalibrationWaitingScreen);
    dtostrf(defaults.averageValue, 5, 2, charArray);
    u8g2.drawStr(5, 12, "Average: ");
    u8g2.drawStr(100, 12, charArray);
    u8g2.sendBuffer();
    
    delay(2000);
  }
  float getNextDTWDataGrip()
  {
    tenIntevalVoltageData recordedGripDataPoints = emgCheckerObject.gripSignalCalibrator(liveArrayUpdaterDelayValue, liveArrayUpdaterMillisValue, defaults.maxValue);

      for (int i = 0; i < 10; i++) 
      {
        recordedDataArrayGrip[i] = recordedGripDataPoints.recordedVoltagePoints[i]; 
      }

    return motorMoverObject.dtw_distance(avrgArray, recordedDataArrayGrip, 10); 
  }
  float getNextDTWDataUnGrip()
  {
    tenIntevalVoltageData recordedUnGripDataPoints = emgCheckerObject.UnGripSignalCalibrator(liveArrayUpdaterDelayValue, liveArrayUpdaterMillisValue, defaults.maxValue);

      for (int i = 0; i < 10; i++) 
      {
        recordedDataArrayUnGrip[i] = recordedUnGripDataPoints.recordedVoltagePoints[i]; 
      }

    return motorMoverObject.dtw_distance(avrgArray, recordedDataArrayUnGrip, 10); 
  }
  void gripSignalListener()
  {
    waitScreenDisplay();
    delay(2000);
    pulseScreenDisplay();

    DTWForGripTestsArray[3] = getNextDTWDataGrip();
    dtostrf(DTWForGripTestsArray[3], 5, 2, charArray);
   
    u8g2.clearBuffer();
    u8g2.setFont(u8g2_font_ncenB08_tr);
    u8g2.drawXBMP(0, 0, 128, 64, epd_bitmap_CalibrationWaitingScreen);
    dtostrf(DTWForGripTestsArray[3], 5, 2, charArray);
    u8g2.drawStr(5, 12, "DTW: ");
    u8g2.drawStr(100, 12, charArray);
    u8g2.sendBuffer();

  }
  void unGripSignalListener()
  {
    waitScreenDisplay();

    delay(2000);
    pulseScreenDisplay();

    DTWForUnGripTestsArray[3] = getNextDTWDataUnGrip();
    dtostrf(DTWForUnGripTestsArray[3], 5, 2, charArray);
    
    u8g2.clearBuffer();
    u8g2.setFont(u8g2_font_ncenB08_tr);
    u8g2.drawXBMP(0, 0, 128, 64, epd_bitmap_CalibrationWaitingScreen);
    dtostrf(DTWForUnGripTestsArray[3], 5, 2, charArray);
    u8g2.drawStr(5, 12, "DTW: ");
    u8g2.drawStr(100, 12, charArray);
    u8g2.sendBuffer();
  }
  void readEncoder() 
  {
    int b = digitalRead(ENCB);
    
      if (b > 0) 
      {
        stepAmount--;
      } 
      else 
      {
        stepAmount++;
      }
  } 
  void drawImageFromBatteryVoltage()
  {
    if (batteryVoltage >= 1.20) /// Battery state = high
      {
        u8g2.drawXBMP(0, 16, 111, 48, epd_bitmap_BatteryStateLvL4);                                                  
        u8g2.sendBuffer();
        delay(1000);
      }
      if(batteryVoltage< 1.20 && batteryVoltage>= 1.19)///Battery state
      {
        u8g2.drawXBMP(0, 16, 111, 48, epd_bitmap_BatteryStateLvL3);
        u8g2.sendBuffer();
        delay(1000);
      }
      if(batteryVoltage< 1.19 && batteryVoltage>= 1.18)///Battery state
      {
        u8g2.drawXBMP(0, 16, 111, 48, epd_bitmap_BatteryStateLvL2);
        u8g2.sendBuffer();
        delay(1000);
      }
      if(batteryVoltage< 1.18 && batteryVoltage>= 1.17)///Battery state
      {
        
        u8g2.drawXBMP(0, 16, 111, 48, epd_bitmap_BatteryStateLvL1);
        u8g2.sendBuffer();
        delay(1000);
      }
      if(batteryVoltage< 1.17)///Battery state
      {
        u8g2.drawXBMP(0, 16, 111, 48, epd_bitmap_BatteryStateLvL0);
        u8g2.sendBuffer();
        delay(1000);
      }
  }
  void stopMotors()
  {
    motorMoverObject.motorActiveUnGrip = false;
    motorMoverObject.motorActiveGrip = false;
    
    analogWrite(backwardSpinPin, 0);
    analogWrite(forwardSpinPin, 0);
  }
  void checkPiezo()
  {
    PressureSensorObject.updateKilogramReadin();
    if (PressureSensorObject.kilograms >= 1) // Is the hand gripping something? Set vibration
    {
      speedPiezo = (int)25*PressureSensorObject.kilograms;
      analogWrite(piezoFeedbackPWMPin, speedPiezo);
    }
    else
    {
      speedPiezo = 0;
      analogWrite(piezoFeedbackPWMPin, speedPiezo);
    }
    if(PressureSensorObject.kilograms < 1)
    {
      speedMotor = 255;
    }
    if(PressureSensorObject.kilograms >= 1)
    {
      speedMotor = 255;
    }
  }
  void motorLimitStopper()
  {
    
    if(stepAmount >= stepClosedPosition - 200)//fully closed
    {
      analogWrite(forwardSpinPin, 0);
      motorMoverObject.motorActiveGrip = false;
      motorMoverObject.motorActiveUnGrip = false;
    }
    if(stepAmount <= stepOpenedPosition + 200)//fully opened
    {
      analogWrite(backwardSpinPin, 0);
      motorMoverObject.motorActiveGrip = false;
      motorMoverObject.motorActiveUnGrip = false;
    }
    
  }
  void resetMorse()
  {
    morse0 = false;
    morse1 = false;

    morseFirstStep = false;
    morseTimerActivity = false;
  }
  void similarityChecker()
  {
    gripMultiplier = 1.45;
    ungripMultiplier = 1.3;
    gripMaxLimit = lowerEndGripDTW / gripMultiplier;
    unGripMaxLimit = lowerEndUnGripDTW / ungripMultiplier;
    //gripMaxLimit = 0.5;
    //unGripMaxLimit = 0.13;
    grippingIsTrue = (gripSignalSimilarity <= gripMaxLimit) && (ungripSignalSimilarity > unGripMaxLimit);
    unGrippingIsTrue = (ungripSignalSimilarity <= unGripMaxLimit) && (gripSignalSimilarity > gripMaxLimit);
    //unGrippingIsTrue = ungripSignalSimilarity<= lowerEndUnGripDTW/ungripMultiplier && gripSignalSimilarity> lowerEndGripDTW/gripMultiplier;
  }
///////////////////////FUNCTIONS END

void setup() 
{
  delay(1000);
  Serial.begin(115200);
  
  u8g2.begin();

  u8g2.clearBuffer();
  u8g2.setFont(u8g2_font_ncenB08_tr);

  SDCardObject.chipSelect = 5;
  
  u8g2.sendBuffer();

  emgCheckerObject.emgPin = emgAPin;
  motorMoverObject.cooldown = 1000;

  pinMode(forwardSpinPin, OUTPUT);
  pinMode(backwardSpinPin, OUTPUT);

  pinMode(forwardButtonPin, INPUT_PULLUP); 
  pinMode(backwardButtonPin, INPUT_PULLUP);  
  pinMode(calibrationButtonPin, INPUT_PULLUP);

  pinMode(emgAPin,INPUT);

  pinMode(piezoFeedbackPWMPin, OUTPUT);
  digitalWrite(piezoFeedbackPWMPin,LOW);
  digitalWrite(checkBatteryPin, LOW);

  batteryHalfAnalogValue = analogRead(batteryAnalogReaderPin);
  batteryVoltage = batteryHalfAnalogValue * (3.3 / 4095.00) * 2;

  attachInterrupt(digitalPinToInterrupt(ENCA),readEncoder,RISING);
}
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////LOOP
void loop() 
{
  delay(19);
  //emgVolt = analogRead(emgAPin) * (3.3 / 4095.0);
  //Serial.println(DTWLive);
  
  
  //Initialize
  if(firstTimeInitialize)//buffer for warmup
  {
    delay(1000);
    
    emgCheckerObject.resetLiveArrayDataAvrg();
    //////////////////////
      if (!SD.begin(SDCardObject.chipSelect))//init without SD 
      {
        u8g2.clearBuffer();
        u8g2.setFont(u8g2_font_ncenB08_tr);
        u8g2.drawStr(5, 33, "SD card failed!");
        u8g2.sendBuffer();
        delay(1000);
      }
      else//init with SD
      {
        dataFile = SD.open("/data.txt");
          if (!dataFile)//init without file
          {
            u8g2.clearBuffer();
            u8g2.setFont(u8g2_font_ncenB08_tr);
            u8g2.drawStr(5, 48, "Error no data.exe");
            u8g2.sendBuffer();
            delay(1000);
          }
          else//init with file
          {
            SDCardObject.readTheDataFromSDCardIntoDataInTheFile();
            SDCardObject.splitFloatArray(SDCardObject.dataInTheFile);

            defaults.minValue = SDCardObject.minS;
            defaults.maxValue = SDCardObject.maxS;
            defaults.averageValue = SDCardObject.avrgS;

            lowerEndGripDTW = SDCardObject.gripV;
            lowerEndUnGripDTW = SDCardObject.unGripV;
            DTWStatic = SDCardObject.staticValue;

              for (int i = 0; i < 10; i++)
              {
              avrgArray[i] = SDCardObject.defaultAvgArray[i];
              emgCheckerObject.averageArray[i] = SDCardObject.defaultAvgArray[i];
              recordedDataArrayGrip[i] = SDCardObject.gripArrayV[i];
              recordedDataArrayUnGrip[i] = SDCardObject.unGripArrayV[i];
              }
          }
      }
    //////////////////////  
      
    dataFile.close();

    delay(1000);

    u8g2.clearBuffer();
    u8g2.setFont(u8g2_font_ncenB08_tr);
    u8g2.drawStr(5, 8, "Step Calibration");
    u8g2.sendBuffer();
    
      while(true)
      {
        delay(100);
        PressureSensorObject.updateKilogramReadin();
        
        checkPiezo();
        if (PressureSensorObject.kilograms >= 1)
        {
          analogWrite(forwardSpinPin, 0);
          analogWrite(backwardSpinPin, 0);
          stepClosedPosition = (float)stepAmount;
          stepOpenedPosition = stepClosedPosition - 4350.0;
          analogWrite(backwardSpinPin, 255);
          analogWrite(forwardSpinPin, 0);
          delay(500);
          analogWrite(forwardSpinPin, 0);
          analogWrite(backwardSpinPin, 0);
          speedPiezo = 0;
          analogWrite(piezoFeedbackPWMPin, speedPiezo);
          break;
        }
        else
        {
        analogWrite(backwardSpinPin, 0);
        analogWrite(forwardSpinPin, 125);
        }
      }
    
      emgCheckerObject.liveArrayUpdate(liveArrayUpdaterMillisValue, liveArrayUpdaterDelayValue);
      float *liveArray = emgCheckerObject.getLiveArrayData();
      for (int i = 0; i < 10; i++)
      {
        liveArray[i] = avrgArray[i];
      }

      
    //////////////////////
    

    u8g2.clearBuffer();
    u8g2.setFont(u8g2_font_ncenB08_tr);

    

    char charArray[6];

    u8g2.drawStr(5, 8, "Calibartion Values:");

    dtostrf(avrgArray[5], 4, 2, charArray);
    u8g2.drawStr(5, 33, "Avrg Value: ");
    u8g2.drawStr(100, 33, charArray);

    dtostrf(lowerEndGripDTW, 4, 2, charArray);
    u8g2.drawStr(5, 48, "GripLDTW : ");
    u8g2.drawStr(100, 48, charArray);

    dtostrf(lowerEndUnGripDTW, 4, 2, charArray);
    u8g2.drawStr(5, 63, "unGripLDTW : ");
    u8g2.drawStr(100, 63, charArray);
    u8g2.sendBuffer();
    batteryCheckCooldown = 0.0;
    delay(2000);

    u8g2.clearBuffer();
    u8g2.setFont(u8g2_font_ncenB08_tr);
    u8g2.drawStr(5, 33, "Push calibration");
    u8g2.drawStr(5, 48, "button to go into ");
    u8g2.drawStr(5, 63, "calibration mode");
    u8g2.sendBuffer();

    unsigned long waitingForCalibration = millis();
    while (millis() - waitingForCalibration <= 2000) //Wait 2 seconds in calibration mode
    {
    // Check if the condition is met
      if (digitalRead(calibrationButtonPin) == LOW) 
      {
        inCalibrationMode = true;
        break; // Break out of the loop if condition is met
      }
      delay(100);
    }
    


    digitalWrite(checkBatteryPin, HIGH);
    delay(100);
    batteryHalfAnalogValue = analogRead(batteryAnalogReaderPin);
    digitalWrite(checkBatteryPin, LOW);
    batteryCheckCooldown = millis();
    batteryVoltage = batteryHalfAnalogValue * (3.3 / 4095.00);

    u8g2.clearBuffer();
    u8g2.setFont(u8g2_font_ncenB08_tr);


    u8g2.drawStr(5, 8, "Battery State: ");
    dtostrf(batteryVoltage, 5, 2, charArray);
    u8g2.drawStr(100, 12, charArray);


    drawImageFromBatteryVoltage();
    morseCooldownTimer = millis();
    firstTimeInitialize = false;
    programStart = millis();
  }
  
  //Pressure sensor check
  checkPiezo();
  PressureSensorObject.updateKilogramReadin();

  //Update display from "SoC"
  if(millis() - batteryCheckCooldown >= 60000)//Update display from battery voltage once every minute
  {
    digitalWrite(checkBatteryPin, HIGH);
    delay(100);
    batteryHalfAnalogValue = analogRead(batteryAnalogReaderPin);
    digitalWrite(checkBatteryPin, LOW);
    batteryCheckCooldown = millis();
    batteryVoltage = batteryHalfAnalogValue * (3.3 / 4095.00);

    u8g2.clearBuffer();
    u8g2.setFont(u8g2_font_ncenB08_tr);

    //
    if(manualMode == true)
    {
      u8g2.drawStr(5, 8, "Manual Mode Active");

    }
    else
    {
      u8g2.drawStr(5, 8, "Battery State: ");
      dtostrf(batteryVoltage, 5, 2, charArray);
      u8g2.drawStr(100, 12, charArray);
    }
    drawImageFromBatteryVoltage();
      
  }
  
  //Hand starts normally
  if(inCalibrationMode == false && manualMode == false)
  {
    emgCheckerObject.liveArrayUpdate(liveArrayUpdaterMillisValue,liveArrayUpdaterDelayValue);
    float* liveArray = emgCheckerObject.getLiveArrayData();
    PressureSensorObject.updateKilogramReadin();

    motorLimitStopper();
    checkPiezo();
    
      if(motorMoverObject.resetTheLiveDTW == true)
      {
          for (int i = 0; i < 10; i++)
          {
            liveArray[i] = avrgArray[i];   
          }
        emgCheckerObject.resetLiveArrayDataAvrg();
        motorMoverObject.resetTheLiveDTW = false;
        DTWLive = 0.0;
      }
      
        gripSignalSimilarity = motorMoverObject.dtw_distance(recordedDataArrayGrip,liveArray, 10);
        ungripSignalSimilarity = motorMoverObject.dtw_distance(recordedDataArrayUnGrip,liveArray, 10);
      /*
        Serial.print("Time: ");
        Serial.print((millis()-programStart));
        Serial.print(" / Current Grip Similarity: ");
        Serial.print(gripSignalSimilarity);
        Serial.print("/");
        Serial.print(gripMaxLimit);

        Serial.print("   ///  Current UnGrip Similarity: ");
        Serial.print(ungripSignalSimilarity);
        Serial.print("/");
        Serial.println(unGripMaxLimit);
      */
      similarityChecker();

      /////////////
      
        if(grippingIsTrue && (millis()-cooldownForSimilarity)>= 1500)//Grip
        {
          analogWrite(backwardSpinPin, 0);
          analogWrite(forwardSpinPin, 0);

          analogWrite(backwardSpinPin, 0);
          analogWrite(forwardSpinPin, speedMotor);
          stopMotorTimer = 250;
          motorMoverTimer = millis();

          Serial.println("----Gripped!!!");
          for (int i = 0; i < 10; i++)
            {
              liveArray[i] = avrgArray[i];   
            }
            emgCheckerObject.resetLiveArrayDataAvrg();
            gripSignalSimilarity = motorMoverObject.dtw_distance(recordedDataArrayGrip,liveArray, 10);
            ungripSignalSimilarity = motorMoverObject.dtw_distance(recordedDataArrayUnGrip,liveArray, 10);
            similarityChecker();
            cooldownForSimilarity = millis();
        }

        if(unGrippingIsTrue && (millis()-cooldownForSimilarity)>= 1500)//UnGrip
        {
          analogWrite(backwardSpinPin, 0);
          analogWrite(forwardSpinPin, 0);

          analogWrite(backwardSpinPin, speedMotor);
          analogWrite(forwardSpinPin, 0);
          stopMotorTimer = 250;
          motorMoverTimer = millis();

          Serial.println("----Expanded!!!");
          for (int i = 0; i < 10; i++)
            {
              liveArray[i] = avrgArray[i];   
            }
          emgCheckerObject.resetLiveArrayDataAvrg();
          gripSignalSimilarity = motorMoverObject.dtw_distance(recordedDataArrayGrip,liveArray, 10);
          ungripSignalSimilarity = motorMoverObject.dtw_distance(recordedDataArrayUnGrip,liveArray, 10);
          similarityChecker();
          cooldownForSimilarity = millis();
        }   
      
      /////////////
      /*
      if(morseFirstStep == false)
      {
        if(grippingIsTrue && motorMoverObject.motorActiveGrip == false && motorMoverObject.motorActiveUnGrip == false)//Got "0"
        {
          morse1 = true;
          Serial.println("1");
          morseFirstStep = true;

            for (int i = 0; i < 10; i++)
            {
              liveArray[i] = avrgArray[i];   
            }
          emgCheckerObject.resetLiveArrayDataAvrg();
          gripSignalSimilarity = motorMoverObject.dtw_distance(recordedDataArrayGrip,liveArray, 10);
          ungripSignalSimilarity = motorMoverObject.dtw_distance(recordedDataArrayUnGrip,liveArray, 10);
          similarityChecker();
        }

        if(unGrippingIsTrue && motorMoverObject.motorActiveGrip == false && motorMoverObject.motorActiveUnGrip == false)//Got "1"
        {
          morse0 = true;
          Serial.println("0");
          morseFirstStep = true;

            for (int i = 0; i < 10; i++)
            {
              liveArray[i] = avrgArray[i];   
            }
          emgCheckerObject.resetLiveArrayDataAvrg();
          gripSignalSimilarity = motorMoverObject.dtw_distance(recordedDataArrayGrip,liveArray, 10);
          ungripSignalSimilarity = motorMoverObject.dtw_distance(recordedDataArrayUnGrip,liveArray, 10);
          similarityChecker();
          
        }
      }
      else
      {
          if(morse1 == true)// "11" or "10"
          {
            if(grippingIsTrue)//Got "11"
            {

              analogWrite(backwardSpinPin, 0);
              analogWrite(forwardSpinPin, 0);

              analogWrite(backwardSpinPin, 0);
              analogWrite(forwardSpinPin, speedMotor);
              stopMotorTimer = 250;
              motorMoverTimer = millis();

              resetMorse();
              Serial.println("11");

                for (int i = 0; i < 10; i++)
                {
                  liveArray[i] = avrgArray[i];   
                }
              emgCheckerObject.resetLiveArrayDataAvrg();
              gripSignalSimilarity = motorMoverObject.dtw_distance(recordedDataArrayGrip,liveArray, 10);
              ungripSignalSimilarity = motorMoverObject.dtw_distance(recordedDataArrayUnGrip,liveArray, 10);
              similarityChecker();
            }

            if(unGrippingIsTrue)//Got "10"
            {
              analogWrite(backwardSpinPin, 0);
              analogWrite(forwardSpinPin, 0);

              analogWrite(backwardSpinPin, speedMotor);
              analogWrite(forwardSpinPin, 0);
              stopMotorTimer = 2000;
              motorMoverTimer = millis();

              resetMorse();
              Serial.println("10");

                for (int i = 0; i < 10; i++)
                {
                  liveArray[i] = avrgArray[i];   
                }
              emgCheckerObject.resetLiveArrayDataAvrg();
              gripSignalSimilarity = motorMoverObject.dtw_distance(recordedDataArrayGrip,liveArray, 10);
              ungripSignalSimilarity = motorMoverObject.dtw_distance(recordedDataArrayUnGrip,liveArray, 10);
              similarityChecker();
            }
          }

          if(morse0 == true)// "01" or "00"
          {
            if(grippingIsTrue)//Got "01"
            {
              analogWrite(backwardSpinPin, 0);
              analogWrite(forwardSpinPin, 0);

              analogWrite(backwardSpinPin, 0);
              analogWrite(forwardSpinPin, speedMotor);
              stopMotorTimer = 2000;
              motorMoverTimer = millis();

              resetMorse();
              Serial.println("01");
                for (int i = 0; i < 10; i++)
                {
                  liveArray[i] = avrgArray[i];   
                }
              emgCheckerObject.resetLiveArrayDataAvrg();
              gripSignalSimilarity = motorMoverObject.dtw_distance(recordedDataArrayGrip,liveArray, 10);
              ungripSignalSimilarity = motorMoverObject.dtw_distance(recordedDataArrayUnGrip,liveArray, 10);
              similarityChecker();
            }
            if(unGrippingIsTrue)//Got "00"
            {
              analogWrite(backwardSpinPin, 0);
              analogWrite(forwardSpinPin, 0);

              analogWrite(backwardSpinPin, speedMotor);
              analogWrite(forwardSpinPin, 0);
              stopMotorTimer = 250;
              motorMoverTimer = millis();

              resetMorse();
              Serial.println("00");
                for (int i = 0; i < 10; i++)
                {
                  liveArray[i] = avrgArray[i];   
                }
              emgCheckerObject.resetLiveArrayDataAvrg();
              gripSignalSimilarity = motorMoverObject.dtw_distance(recordedDataArrayGrip,liveArray, 10);
              ungripSignalSimilarity = motorMoverObject.dtw_distance(recordedDataArrayUnGrip,liveArray, 10);
              similarityChecker();
            }
          }
      }
      */
      ////////////////
      if(millis() - motorMoverTimer >= stopMotorTimer)
      {
        analogWrite(backwardSpinPin, 0);
        analogWrite(forwardSpinPin, 0);
      }
      
      
  }
  pinMode(forwardButtonPin, INPUT_PULLUP); 
  pinMode(backwardButtonPin, INPUT_PULLUP);  
  //Get into calibration if 3 secs pressed

  

  if (digitalRead(calibrationButtonPin) == LOW && digitalRead(backwardButtonPin) == LOW) 
  {
    if (waitingCalibrationTimer == false)//Start waiting for calibration
    {
      timerCalibrationMode = millis();
      waitingCalibrationTimer = true;
    }
    else//was already waiting, has it been 3 seconds?
    {
      if(millis() - timerCalibrationMode >= 3000)
      {
        inCalibrationMode = true;
        waitingCalibrationTimer = false;
      }
    }
  }
  else
  {
    waitingCalibrationTimer = false;
  }

  if(inCalibrationMode == true)//In calibration mode to get default/grip and ungrip
  {
    stopMotors();
    u8g2.clearBuffer();
    u8g2.setFont(u8g2_font_ncenB08_tr);
    u8g2.drawXBMP(0, 0, 128, 64, epd_bitmap_DefaultValuesUIReady);
    u8g2.drawStr(5, 12, "Calibration Mode");
    u8g2.sendBuffer();
    delay(1000);
    
    while(true)
    {
      delay(20);
      emgCheckerObject.liveArrayUpdate(liveArrayUpdaterMillisValue,liveArrayUpdaterDelayValue);
      float* liveArray = emgCheckerObject.getLiveArrayData();
        if(digitalRead(calibrationButtonPin) == LOW)
        {
          break;
        }
      gripSignalSimilarity = motorMoverObject.dtw_distance(recordedDataArrayGrip,liveArray, 10);
      ungripSignalSimilarity = motorMoverObject.dtw_distance(recordedDataArrayUnGrip,liveArray, 10);
      Serial.print("Time: ");
      Serial.print((millis()-programStart));
      Serial.print(" / Current Grip Similarity: ");
      Serial.print(gripSignalSimilarity);
      Serial.print("/");
      Serial.print(lowerEndGripDTW / gripMultiplier);

      Serial.print("   ///  Current UnGrip Similarity: ");
      Serial.print(ungripSignalSimilarity);
      Serial.print("/");
      Serial.println(lowerEndUnGripDTW/ungripMultiplier);
    }
    /////////////////////////////////////////
    defaultValueListener();
    /////////////////////////////////////////
    timerCheckDTW = millis();
    staticFound = false;
    while(true)
    {
      if(digitalRead(calibrationButtonPin) == LOW)
      {
        break;
      }
      if(staticFound == false)
      {
        u8g2.clearBuffer();
        u8g2.setFont(u8g2_font_ncenB08_tr);
        dtostrf(defaults.averageValue, 5, 2, charArray);
        u8g2.drawStr(5, 12, "Average Value: ");
        u8g2.drawStr(100, 12, charArray);
        u8g2.drawStr(5, 24, "EMG Graph is");
        u8g2.drawStr(5, 36, "ready for view");
        u8g2.drawStr(5, 48, "in MATLAB");
        u8g2.sendBuffer();
        staticFound = true;
      }

      emgVolt = analogRead(emgAPin) * (3.3 / 4095.0);
      Serial.println(emgVolt);
      delay(20);
    }
    
    /////////////////////////////////////////
    u8g2.clearBuffer();
    u8g2.setFont(u8g2_font_ncenB08_tr);
    u8g2.drawXBMP(0, 0, 128, 64, epd_bitmap_EMGProbeCheck);
    dtostrf(DTWLive, 5, 2, charArray);
    u8g2.drawStr(5, 12, "DTW is:");
    u8g2.drawStr(100, 12, charArray);
    u8g2.sendBuffer();
    delay(1000);
    timerCheckDTW = millis();
    while(true)
    {
      emgCheckerObject.liveArrayUpdate(liveArrayUpdaterMillisValue,liveArrayUpdaterDelayValue);
      float* liveArray = emgCheckerObject.getLiveArrayData();
      DTWLive = motorMoverObject.dtw_distance(avrgArray, liveArray , 10);
      delay(20);
        if(digitalRead(calibrationButtonPin) == LOW)
        {
          break;
        }
        if( (millis()-timerCheckDTW) >= 1000 )
        {
        u8g2.clearBuffer();
        u8g2.setFont(u8g2_font_ncenB08_tr);
        u8g2.drawXBMP(0, 0, 128, 64, epd_bitmap_EMGProbeCheck);
        dtostrf(DTWLive, 5, 2, charArray);
        u8g2.drawStr(5, 12, "DTW is:");
        u8g2.drawStr(100, 12, charArray);
        u8g2.sendBuffer();
        timerCheckDTW = millis();
        }
    }
    
    u8g2.clearBuffer();
    u8g2.setFont(u8g2_font_ncenB08_tr);
    u8g2.drawXBMP(0, 0, 128, 64, epd_bitmap_CalibrationGripScreen);
    dtostrf(DTWForGrip, 5, 2, charArray);
    u8g2.drawStr(5, 12, "Old GripDTW: ");
    u8g2.drawStr(100, 12, charArray);
    u8g2.sendBuffer();
    delay(1000);

    while(true)
    {
        if(digitalRead(calibrationButtonPin) == LOW)
        {
          break;
        }
        delay(100);
    }
            
    /////////////////////////////////////////
    gripSignalListener();
    /////////////////////////////////////////
    u8g2.clearBuffer();
    u8g2.setFont(u8g2_font_ncenB08_tr);
    u8g2.drawXBMP(0, 0, 128, 64, epd_bitmap_CalibrationUnGripScreen);
    dtostrf(DTWForUnGrip, 5, 2, charArray);
    u8g2.drawStr(5, 12, "Old UnGripDTW: ");
    u8g2.drawStr(100, 12, charArray);
    u8g2.sendBuffer();
    while(true)
    {
      if(digitalRead(calibrationButtonPin) == LOW)
      {
        break;
      }
      delay(100);
    }

    /////////////////////////////////////////
    unGripSignalListener();
    /////////////////////////////////////////
    //
    u8g2.clearBuffer();
    u8g2.setFont(u8g2_font_ncenB08_tr);
    //
    delay(1000);

    u8g2.clearBuffer();
    u8g2.setFont(u8g2_font_ncenB08_tr);
    u8g2.drawStr(5, 12, "Analyzing");
    u8g2.drawStr(5, 24, "Default Similarities");
    u8g2.drawStr(5, 36, "Hold Still...");
    u8g2.sendBuffer();

    long timerZZ = millis();
    while(true)
    {
      delay(20);
      emgCheckerObject.liveArrayUpdate(liveArrayUpdaterMillisValue,liveArrayUpdaterDelayValue);
      float* liveArray = emgCheckerObject.getLiveArrayData();
      lowerEndGripDTW = motorMoverObject.dtw_distance(recordedDataArrayGrip,liveArray, 10);
      lowerEndUnGripDTW = motorMoverObject.dtw_distance(recordedDataArrayUnGrip,liveArray, 10);
        if(millis()-timerZZ>=4000)
        {
          break;
        }
    }

    u8g2.clearBuffer();
    u8g2.setFont(u8g2_font_ncenB08_tr);
    u8g2.drawStr(5, 8, "Press button to save");

    dtostrf(defaults.averageValue, 4, 2, charArray);
    u8g2.drawStr(5, 33, "Defualt Signal : ");
    u8g2.drawStr(100, 33, charArray);

    dtostrf(lowerEndGripDTW, 4, 2, charArray);
    u8g2.drawStr(5, 48, "GripLDTW : ");
    u8g2.drawStr(100, 48, charArray);

    dtostrf(lowerEndUnGripDTW, 4, 2, charArray);
    u8g2.drawStr(5, 63, "unGripLDTW : ");
    u8g2.drawStr(100, 63, charArray);

    u8g2.sendBuffer();
    while(true)
    {
      if(digitalRead(calibrationButtonPin) == LOW)
      {
        break;
      }
      delay(100);
    }

    SDCardObject.stitchFloatArrays(defaults.minValue, defaults.maxValue, defaults.averageValue, recordedDataArrayGrip, lowerEndGripDTW, recordedDataArrayUnGrip, lowerEndUnGripDTW, avrgArray, DTWStatic);
    SDCardObject.writeDataOnSpecificRangeIncluded(0,35);
    //
    
    inCalibrationMode = false;
    manualMode = false;
    manualBreakerCounter = 1;

    digitalWrite(checkBatteryPin, HIGH);
    delay(100);
    batteryHalfAnalogValue = analogRead(batteryAnalogReaderPin);
    digitalWrite(checkBatteryPin, LOW);
    batteryCheckCooldown = millis();
    batteryVoltage = batteryHalfAnalogValue * (3.3 / 4095.00);

    u8g2.clearBuffer();
    u8g2.setFont(u8g2_font_ncenB08_tr);


    u8g2.drawStr(5, 8, "Battery State: ");
    dtostrf(batteryVoltage, 5, 2, charArray);
    u8g2.drawStr(100, 12, charArray);


    drawImageFromBatteryVoltage();

    delay(1000);
  }
  
  if(digitalRead(backwardButtonPin) == LOW && manualMode == false)
  {
    u8g2.clearBuffer();
    u8g2.setFont(u8g2_font_ncenB08_tr);
    u8g2.drawStr(5, 8, "Manual Mode Active");
    drawImageFromBatteryVoltage();

    manualMode = true;
    stopMotors();
  }
  if(digitalRead(calibrationButtonPin) == LOW && manualMode == false)
  {
    u8g2.clearBuffer();
    u8g2.setFont(u8g2_font_ncenB08_tr);
    u8g2.drawStr(5, 8, "Manual Mode Active");
    drawImageFromBatteryVoltage();
    
    manualMode = true;
    stopMotors();
  }
 
  if(manualMode == true)
  {
    batteryHalfAnalogValue = analogRead(batteryAnalogReaderPin);
    batteryVoltage = batteryHalfAnalogValue * (3.3 / 4095.00);
    Serial.println(batteryVoltage*2);
    if(digitalRead(calibrationButtonPin) == LOW  && digitalRead(backwardButtonPin) == HIGH)
    {
      analogWrite(backwardSpinPin, 0);
      analogWrite(forwardSpinPin, 255);
      motorLimitStopper();
    }
    if(digitalRead(calibrationButtonPin) == HIGH && digitalRead(backwardButtonPin) == LOW)
    {
      analogWrite(backwardSpinPin, 255);
      analogWrite(forwardSpinPin, 0);
      motorLimitStopper();
    }
    if(digitalRead(calibrationButtonPin) == HIGH && digitalRead(backwardButtonPin) == HIGH)
    {
      analogWrite(backwardSpinPin, 0);
      analogWrite(forwardSpinPin, 0);
    }
    if(digitalRead(calibrationButtonPin) == LOW && digitalRead(backwardButtonPin) == LOW)
    {
      analogWrite(backwardSpinPin, 0);
      analogWrite(forwardSpinPin, 0);
    }

    //////////////////////////////
    
    if(checkOthers == true)
    {
      if(digitalRead(calibrationButtonPin) == LOW && manualBreakerCounter == 2)// second click false
      {
        manualBreakerCounter = 1;
      }
      if(digitalRead(backwardButtonPin) == LOW && manualBreakerCounter == 3)// third click false
      {
        manualBreakerCounter = 1;
      }
      if(digitalRead(calibrationButtonPin) == LOW && manualBreakerCounter == 4) // forth click false
      {
        manualBreakerCounter = 1;
      }

      if(digitalRead(calibrationButtonPin) == LOW && manualBreakerCounter == 1)//click 1
      {
        manualBreakerCounter = manualBreakerCounter + 1;
      }
      if(digitalRead(backwardButtonPin) == LOW && manualBreakerCounter == 2)// click 2
      {
        manualBreakerCounter = manualBreakerCounter + 1;
      }
      if(digitalRead(calibrationButtonPin) == LOW && manualBreakerCounter == 3)// click 3
      {
        manualBreakerCounter = manualBreakerCounter + 1;
      }
      if(digitalRead(backwardButtonPin) == LOW && manualBreakerCounter == 4)// click 4
      {
        analogWrite(backwardSpinPin, 0);
        analogWrite(forwardSpinPin, 0);
        manualBreakerCounter = 1;
        manualMode = false;
        digitalWrite(checkBatteryPin, HIGH);
        delay(100);
        batteryHalfAnalogValue = analogRead(batteryAnalogReaderPin);
        digitalWrite(checkBatteryPin, LOW);
        batteryCheckCooldown = millis();
        batteryVoltage = batteryHalfAnalogValue * (3.3 / 4095.00);

        u8g2.clearBuffer();
        u8g2.setFont(u8g2_font_ncenB08_tr);


        u8g2.drawStr(5, 8, "Battery State: ");
        dtostrf(batteryVoltage, 5, 2, charArray);
        u8g2.drawStr(100, 12, charArray);


        drawImageFromBatteryVoltage();





      }
    }
    if(digitalRead(calibrationButtonPin) == LOW)
    {
      checkOthers = false;
    }
    if(digitalRead(backwardButtonPin) == LOW)
    {
      checkOthers = false;
    }
    if(digitalRead(calibrationButtonPin) == HIGH && digitalRead(backwardButtonPin) == HIGH)
    {
      checkOthers = true;
    }
    
    //////////////////////////////
  }  

}